{"remainingRequest":"/www/VueApp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/www/VueApp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/www/VueApp/node_modules/vue-loader/lib/index.js??vue-loader-options!/www/VueApp/src/views/internet/InternetPricePage.vue?vue&type=template&id=4f2d423a&scoped=true&","dependencies":[{"path":"/www/VueApp/src/views/internet/InternetPricePage.vue","mtime":1667562112771},{"path":"/www/VueApp/node_modules/cache-loader/dist/cjs.js","mtime":1667562104435},{"path":"/www/VueApp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1667562109283},{"path":"/www/VueApp/node_modules/cache-loader/dist/cjs.js","mtime":1667562104435},{"path":"/www/VueApp/node_modules/vue-loader/lib/index.js","mtime":1667562109283}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}